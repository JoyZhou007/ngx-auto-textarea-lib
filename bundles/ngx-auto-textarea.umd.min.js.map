{"version":3,"sources":["ng://ngx-auto-textarea/lib/ngx-auto-textarea.service.ts","ng://ngx-auto-textarea/lib/type.service.ts","ng://ngx-auto-textarea/lib/ngx-auto-textarea.component.ts","ng://ngx-auto-textarea/lib/ngx-auto-textarea.directive.ts","ng://ngx-auto-textarea/lib/ngx-auto-textarea.module.ts"],"names":["NgxAutoTextareaService","Injectable","args","providedIn","TypeService","prototype","getStringLocaleLen","text","textLen","regExpEn","regExpSpace","i","length","lastIndex","test","localeSubString","start","maxLen","returnStr","NgxAutoTextareaComponent","ngOnInit","Component","selector","template","styles","Input","NgxAutoTextareaDirective","element","typeService","this","adjustHeight","onInput","textArea","blur","console","log","focus","minHeight","el","nativeElement","appMaxLength","value","diff","offsetHeight","clientHeight","style","height","scrollHeight","Math","max","Directive","ElementRef","HostListener","NgxAutoTextareaModule","NgModule","imports","declarations","exports"],"mappings":"gRAAA,IAAAA,EAAA,oDAGCC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,gHAJd,GCAAC,EAAA,WAOE,SAAAA,YAUOA,EAAAC,UAAAC,4BAAmBC,GACxB,IAAKA,EACH,OAAO,EAQT,IANA,IACIC,EAAkB,EAEhBC,EAAW,8EAEXC,EAAmB,MAChBC,EAAI,EAAGA,EAAIJ,EAAKK,OAAQD,IAC/BF,EAASI,UAAY,EACjBJ,EAASK,KAAKP,EAAKI,KAAOD,EAAYI,KAAKP,EAAKI,IAClDH,GAAW,EAEXA,GAXc,EAclB,OAAOA,GAMTJ,EAAAC,UAAAU,gBAAA,SAAgBR,EAAWS,EAAeC,GACxC,IAAKV,EACH,MAAO,GAET,GAAIS,EAAQT,EAAKK,OACf,MAAO,GAST,IAPA,IACIJ,EAAkB,EAClBU,EAAoB,GAEpBT,EAAW,8EAEXC,EAAmB,MACdC,EAAIK,EAAOL,EAAIJ,EAAKK,SAC3BH,EAASI,UAAY,EACjBJ,EAASK,KAAKP,EAAKI,KAAOD,EAAYI,KAAKP,EAAKI,IAClDH,GAAW,EAEXA,GAZY,IAcAS,EAAVT,IAP+BG,IAUjCO,GAAaX,EAAKI,GAGtB,OAAOO,uBAlEVjB,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,sJAHd,GCAAgB,EAAA,WAcE,SAAAA,mBAF6B,WAK7BA,EAAAd,UAAAe,SAAA,iCAfDC,EAAAA,UAASnB,KAAA,CAAC,CACToB,SAAU,wBACVC,SAAU,uIAKVC,OAAQ,CAAC,0OAGRC,EAAAA,WAZH,GCAAC,EAAA,WAWE,SAAAA,EAAmBC,EACVC,GADUC,KAAAF,QAAAA,EACVE,KAAAD,YAAAA,EACPC,KAAKC,sBAIPJ,EAAArB,UAAA0B,QADA,SACQC,GACNH,KAAKC,gBAIPJ,EAAArB,UAAA4B,KADA,SACKD,GACHE,QAAQC,IAAI,UACZN,KAAKC,gBAIPJ,EAAArB,UAAA+B,MADA,SACMJ,GACJE,QAAQC,IAAI,QACZN,KAAKC,gBAGAJ,EAAArB,UAAAyB,sBAAaO,GACbA,IACHA,EAAY,IAEd,IAAIC,EAAKT,KAAKF,QAAQY,cAElBV,KAAKW,eACQX,KAAKD,YAAYtB,mBAAmBgC,EAAGG,OACvCZ,KAAKW,eAClBX,KAAKF,QAAQY,cAAcE,MAAQZ,KAAKD,YAAYb,gBAAgBuB,EAAGG,MAAO,EAAGZ,KAAKW,gBAK1F,IAAIE,EAAOJ,EAAGK,aAAeL,EAAGM,aAEhCN,EAAGO,MAAMC,OAAS,EAIlBZ,QAAQC,IAAI,QAASG,EAAGS,aAAeL,GACvCJ,EAAGO,MAAMC,OAASE,KAAKC,IAAIZ,EAAWC,EAAGS,aAAeL,GAAQ,0BAnDnEQ,EAAAA,UAAShD,KAAA,CAAC,CACToB,SAAU,oEAJQ6B,EAAAA,kBACX/C,2CAONqB,EAAAA,uBAQA2B,EAAAA,aAAYlD,KAAA,CAAC,QAAS,CAAC,gCAKvBkD,EAAAA,aAAYlD,KAAA,CAAC,OAAQ,CAAC,iCAMtBkD,EAAAA,aAAYlD,KAAA,CAAC,QAAS,CAAC,uBA3B1B,GCAAmD,EAAA,oDAICC,EAAAA,SAAQpD,KAAA,CAAC,CACRqD,QAAS,GAETC,aAAc,CAACrC,EAA0BO,GACzC+B,QAAS,CAACtC,EAA0BO,SARtC","sourcesContent":["import {ElementRef, HostListener, Injectable, Input} from '@angular/core';\nimport {TypeService} from './type.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxAutoTextareaService {\n\n\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TypeService {\n\n  constructor() { }\n\n\n\n\n\n\n  /**\n   * è·åä¸­è±ææ··åå­ç¬¦ä¸²å®ä¹é¿åº¦\n   */\n  public getStringLocaleLen(text: any) {\n    if (!text) {\n      return 0;\n    }\n    const cnCharLen = 3;\n    let textLen: number = 0;\n    // è±æ\n    const regExpEn = /[a-z|A-Z|0-9]|[`|!|@|#|$|%|^|&|*|(|)|\\-|_|+|{|}|<|>|?|,|.|/|[|'|;|:|\"|\\\\]/gi;\n    // æ¢è¡\n    const regExpSpace: any = /\\s/g;\n    for (let i = 0; i < text.length; i++) {\n      regExpEn.lastIndex = 0;\n      if (regExpEn.test(text[i]) || regExpSpace.test(text[i])) {\n        textLen += 1;\n      } else {\n        textLen += cnCharLen;\n      }\n    }\n    return textLen;\n  }\n\n  /**\n   * æç§ä¸­è±ææ··åé¿åº¦æªåå­ç¬¦ä¸²\n   */\n  localeSubString(text: any, start: number, maxLen: number) {\n    if (!text) {\n      return '';\n    }\n    if (start > text.length) {\n      return '';\n    }\n    let cnCharLen = 3;\n    let textLen: number = 0;\n    let returnStr: string = '';\n    // è±æ\n    let regExpEn = /[a-z|A-Z|0-9]|[`|!|@|#|$|%|^|&|*|(|)|\\-|_|+|{|}|<|>|?|,|.|/|[|'|;|:|\"|\\\\]/gi;\n    // æ¢è¡\n    let regExpSpace: any = /\\s/g;\n    for (let i = start; i < text.length; i++) {\n      regExpEn.lastIndex = 0;\n      if (regExpEn.test(text[i]) || regExpSpace.test(text[i])) {\n        textLen += 1;\n      } else {\n        textLen += cnCharLen;\n      }\n      if (textLen > maxLen) {\n        break;\n      } else {\n        returnStr += text[i];\n      }\n    }\n    return returnStr;\n  }\n\n\n}\n","import {Component, Input, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'lib-ngx-auto-textarea',\n  template: `\n    <textarea class=\"ipt-btn\" type=\"text\" #ipt\n              libNgxAutoTextarea [appMaxLength]=\"maxLength\"\n    > </textarea>\n  `,\n  styles: [`.ipt-btn{width:100%;height:10px;border:1px solid #4080cf;border-radius:5px;padding:5px 10px;line-height:20px;background-color:#fff;box-sizing:border-box}`]\n})\nexport class NgxAutoTextareaComponent implements OnInit {\n  @Input() maxLength: number = 500;\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","import { Directive, ElementRef, HostListener, Input } from '@angular/core';\nimport { TypeService } from './type.service';\n\n@Directive({\n  selector: '[libNgxAutoTextarea]'\n})\nexport class NgxAutoTextareaDirective {\n\n  @Input() appMaxLength: number;\n  // public baseRem: number = 37.5;\n\n  constructor(public element: ElementRef,\n    public typeService: TypeService) {\n    this.adjustHeight();\n  }\n\n  @HostListener('input', ['$event.target'])\n  onInput(textArea: HTMLTextAreaElement): void {\n    this.adjustHeight();\n  }\n\n  @HostListener('blur', ['$event.target'])\n  blur(textArea: HTMLTextAreaElement): void {\n    console.log('çå¬å¤±å»ç¦ç¹');\n    this.adjustHeight();\n  }\n\n  @HostListener('focus', ['$event.target'])\n  focus(textArea: HTMLTextAreaElement): void {\n    console.log('çå¬ç¦ç¹');\n    this.adjustHeight();\n  }\n\n  public adjustHeight(minHeight?: number) {\n    if (!minHeight) {\n      minHeight = 10;\n    }\n    let el = this.element.nativeElement;\n    // é²æ­¢å­æ°è¶åºé¿åº¦\n    if (this.appMaxLength) {\n      let countLen = this.typeService.getStringLocaleLen(el.value);\n      if (countLen > this.appMaxLength) {\n        this.element.nativeElement.value = this.typeService.localeSubString(el.value, 0, this.appMaxLength);\n      }\n    }\n    // compute the height difference which is caused by border and outline\n    // let outerHeight = parseInt(window.getComputedStyle(el).height, 10);\n    let diff = el.offsetHeight - el.clientHeight;\n    // set the height to 0 in case of it has to be shrinked\n    el.style.height = 0;\n    // set the correct height\n    // el.scrollHeight is the full height of the content, not just the visible part\n    // el.style.height = Math.max(minHeight, el.scrollHeight + diff) / this.baseRem + 'rem';\n    console.log('sdasd', el.scrollHeight + diff)\n    el.style.height = Math.max(minHeight, el.scrollHeight + diff) + 'px';\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { NgxAutoTextareaComponent } from './ngx-auto-textarea.component';\nimport { NgxAutoTextareaDirective } from './ngx-auto-textarea.directive';\n\n@NgModule({\n  imports: [\n  ],\n  declarations: [NgxAutoTextareaComponent, NgxAutoTextareaDirective],\n  exports: [NgxAutoTextareaComponent, NgxAutoTextareaDirective]\n})\nexport class NgxAutoTextareaModule { }\n"]}