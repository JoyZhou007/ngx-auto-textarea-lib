{"version":3,"file":"ngx-auto-textarea.js.map","sources":["ng://ngx-auto-textarea/lib/ngx-auto-textarea.service.ts","ng://ngx-auto-textarea/lib/type.service.ts","ng://ngx-auto-textarea/lib/ngx-auto-textarea.component.ts","ng://ngx-auto-textarea/lib/ngx-auto-textarea.directive.ts","ng://ngx-auto-textarea/lib/ngx-auto-textarea.module.ts"],"sourcesContent":["import {ElementRef, HostListener, Injectable, Input} from '@angular/core';\nimport {TypeService} from './type.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxAutoTextareaService {\n\n\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TypeService {\n\n  constructor() { }\n\n\n\n\n\n\n  /**\n   * è·åä¸­è±ææ··åå­ç¬¦ä¸²å®ä¹é¿åº¦\n   */\n  public getStringLocaleLen(text: any) {\n    if (!text) {\n      return 0;\n    }\n    const cnCharLen = 3;\n    let textLen: number = 0;\n    // è±æ\n    const regExpEn = /[a-z|A-Z|0-9]|[`|!|@|#|$|%|^|&|*|(|)|\\-|_|+|{|}|<|>|?|,|.|/|[|'|;|:|\"|\\\\]/gi;\n    // æ¢è¡\n    const regExpSpace: any = /\\s/g;\n    for (let i = 0; i < text.length; i++) {\n      regExpEn.lastIndex = 0;\n      if (regExpEn.test(text[i]) || regExpSpace.test(text[i])) {\n        textLen += 1;\n      } else {\n        textLen += cnCharLen;\n      }\n    }\n    return textLen;\n  }\n\n  /**\n   * æç§ä¸­è±ææ··åé¿åº¦æªåå­ç¬¦ä¸²\n   */\n  localeSubString(text: any, start: number, maxLen: number) {\n    if (!text) {\n      return '';\n    }\n    if (start > text.length) {\n      return '';\n    }\n    let cnCharLen = 3;\n    let textLen: number = 0;\n    let returnStr: string = '';\n    // è±æ\n    let regExpEn = /[a-z|A-Z|0-9]|[`|!|@|#|$|%|^|&|*|(|)|\\-|_|+|{|}|<|>|?|,|.|/|[|'|;|:|\"|\\\\]/gi;\n    // æ¢è¡\n    let regExpSpace: any = /\\s/g;\n    for (let i = start; i < text.length; i++) {\n      regExpEn.lastIndex = 0;\n      if (regExpEn.test(text[i]) || regExpSpace.test(text[i])) {\n        textLen += 1;\n      } else {\n        textLen += cnCharLen;\n      }\n      if (textLen > maxLen) {\n        break;\n      } else {\n        returnStr += text[i];\n      }\n    }\n    return returnStr;\n  }\n\n\n}\n","import {Component, Input, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'lib-ngx-auto-textarea',\n  template: `\n    <textarea class=\"ipt-btn\" type=\"text\" #ipt\n              libNgxAutoTextarea [appMaxLength]=\"maxLength\"\n    > </textarea>\n  `,\n  styles: [`.ipt-btn{width:100%;height:10px;border:1px solid #4080cf;border-radius:5px;padding:5px 10px;line-height:20px;background-color:#fff;box-sizing:border-box}`]\n})\nexport class NgxAutoTextareaComponent implements OnInit {\n  @Input() maxLength: number = 500;\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","import { Directive, ElementRef, HostListener, Input } from '@angular/core';\nimport { TypeService } from './type.service';\n\n@Directive({\n  selector: '[libNgxAutoTextarea]'\n})\nexport class NgxAutoTextareaDirective {\n\n  @Input() appMaxLength: number;\n  // public baseRem: number = 37.5;\n\n  constructor(public element: ElementRef,\n    public typeService: TypeService) {\n    this.adjustHeight();\n  }\n\n  @HostListener('input', ['$event.target'])\n  onInput(textArea: HTMLTextAreaElement): void {\n    this.adjustHeight();\n  }\n\n  @HostListener('blur', ['$event.target'])\n  blur(textArea: HTMLTextAreaElement): void {\n    console.log('çå¬å¤±å»ç¦ç¹');\n    this.adjustHeight();\n  }\n\n  @HostListener('focus', ['$event.target'])\n  focus(textArea: HTMLTextAreaElement): void {\n    console.log('çå¬ç¦ç¹');\n    this.adjustHeight();\n  }\n\n  public adjustHeight(minHeight?: number) {\n    if (!minHeight) {\n      minHeight = 10;\n    }\n    let el = this.element.nativeElement;\n    // é²æ­¢å­æ°è¶åºé¿åº¦\n    if (this.appMaxLength) {\n      let countLen = this.typeService.getStringLocaleLen(el.value);\n      if (countLen > this.appMaxLength) {\n        this.element.nativeElement.value = this.typeService.localeSubString(el.value, 0, this.appMaxLength);\n      }\n    }\n    // compute the height difference which is caused by border and outline\n    // let outerHeight = parseInt(window.getComputedStyle(el).height, 10);\n    let diff = el.offsetHeight - el.clientHeight;\n    // set the height to 0 in case of it has to be shrinked\n    el.style.height = 0;\n    // set the correct height\n    // el.scrollHeight is the full height of the content, not just the visible part\n    // el.style.height = Math.max(minHeight, el.scrollHeight + diff) / this.baseRem + 'rem';\n    console.log('sdasd', el.scrollHeight + diff)\n    el.style.height = Math.max(minHeight, el.scrollHeight + diff) + 'px';\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { NgxAutoTextareaComponent } from './ngx-auto-textarea.component';\nimport { NgxAutoTextareaDirective } from './ngx-auto-textarea.directive';\n\n@NgModule({\n  imports: [\n  ],\n  declarations: [NgxAutoTextareaComponent, NgxAutoTextareaDirective],\n  exports: [NgxAutoTextareaComponent, NgxAutoTextareaDirective]\n})\nexport class NgxAutoTextareaModule { }\n"],"names":[],"mappings":";;;;;;AAAA;;;;gBAGC,UAAU,SAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;iCALD;;;;;;;ACAA;IAOE;KAAiB;;;;;;IAUV,wCAAkB;;;;;cAAC,IAAS;QACjC,IAAI,CAAC,IAAI,EAAE;YACT,OAAO,CAAC,CAAC;SACV;;QACD,IAAM,SAAS,GAAG,CAAC,CAAC;;QACpB,IAAI,OAAO,GAAW,CAAC,CAAC;;QAExB,IAAM,QAAQ,GAAG,6EAA6E,CAAC;;QAE/F,IAAM,WAAW,GAAQ,KAAK,CAAC;QAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACpC,QAAQ,CAAC,SAAS,GAAG,CAAC,CAAC;YACvB,IAAI,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;gBACvD,OAAO,IAAI,CAAC,CAAC;aACd;iBAAM;gBACL,OAAO,IAAI,SAAS,CAAC;aACtB;SACF;QACD,OAAO,OAAO,CAAC;;;;;;;;;;;;IAMjB,qCAAe;;;;;;;IAAf,UAAgB,IAAS,EAAE,KAAa,EAAE,MAAc;QACtD,IAAI,CAAC,IAAI,EAAE;YACT,OAAO,EAAE,CAAC;SACX;QACD,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,EAAE;YACvB,OAAO,EAAE,CAAC;SACX;;QACD,IAAI,SAAS,GAAG,CAAC,CAAC;;QAClB,IAAI,OAAO,GAAW,CAAC,CAAC;;QACxB,IAAI,SAAS,GAAW,EAAE,CAAC;;QAE3B,IAAI,QAAQ,GAAG,6EAA6E,CAAC;;QAE7F,IAAI,WAAW,GAAQ,KAAK,CAAC;QAC7B,KAAK,IAAI,CAAC,GAAG,KAAK,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACxC,QAAQ,CAAC,SAAS,GAAG,CAAC,CAAC;YACvB,IAAI,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;gBACvD,OAAO,IAAI,CAAC,CAAC;aACd;iBAAM;gBACL,OAAO,IAAI,SAAS,CAAC;aACtB;YACD,IAAI,OAAO,GAAG,MAAM,EAAE;gBACpB,MAAM;aACP;iBAAM;gBACL,SAAS,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC;aACtB;SACF;QACD,OAAO,SAAS,CAAC;KAClB;;gBAnEF,UAAU,SAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;;;sBAJD;;;;;;;ACAA;IAcE;yBAF6B,GAAG;KAG/B;;;;IAED,2CAAQ;;;IAAR;KACC;;gBAhBF,SAAS,SAAC;oBACT,QAAQ,EAAE,uBAAuB;oBACjC,QAAQ,EAAE,4IAIT;oBACD,MAAM,EAAE,CAAC,2JAA2J,CAAC;iBACtK;;;;;4BAEE,KAAK;;mCAZR;;;;;;;ACAA;;IAWE,kCAAmB,OAAmB,EAC7B;QADU,YAAO,GAAP,OAAO,CAAY;QAC7B,gBAAW,GAAX,WAAW;QAClB,IAAI,CAAC,YAAY,EAAE,CAAC;KACrB;;;;;IAGD,0CAAO;;;;IADP,UACQ,QAA6B;QACnC,IAAI,CAAC,YAAY,EAAE,CAAC;KACrB;;;;;IAGD,uCAAI;;;;IADJ,UACK,QAA6B;QAChC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACtB,IAAI,CAAC,YAAY,EAAE,CAAC;KACrB;;;;;IAGD,wCAAK;;;;IADL,UACM,QAA6B;QACjC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACpB,IAAI,CAAC,YAAY,EAAE,CAAC;KACrB;;;;;IAEM,+CAAY;;;;cAAC,SAAkB;QACpC,IAAI,CAAC,SAAS,EAAE;YACd,SAAS,GAAG,EAAE,CAAC;SAChB;;QACD,IAAI,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC;;QAEpC,IAAI,IAAI,CAAC,YAAY,EAAE;;YACrB,IAAI,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;YAC7D,IAAI,QAAQ,GAAG,IAAI,CAAC,YAAY,EAAE;gBAChC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;aACrG;SACF;;QAGD,IAAI,IAAI,GAAG,EAAE,CAAC,YAAY,GAAG,EAAE,CAAC,YAAY,CAAC;;QAE7C,EAAE,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;;;;QAIpB,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,CAAC,YAAY,GAAG,IAAI,CAAC,CAAA;QAC5C,EAAE,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,EAAE,CAAC,YAAY,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC;;;gBAnDxE,SAAS,SAAC;oBACT,QAAQ,EAAE,sBAAsB;iBACjC;;;;gBALmB,UAAU;gBACrB,WAAW;;;+BAOjB,KAAK;0BAQL,YAAY,SAAC,OAAO,EAAE,CAAC,eAAe,CAAC;uBAKvC,YAAY,SAAC,MAAM,EAAE,CAAC,eAAe,CAAC;wBAMtC,YAAY,SAAC,OAAO,EAAE,CAAC,eAAe,CAAC;;mCA3B1C;;;;;;;ACAA;;;;gBAIC,QAAQ,SAAC;oBACR,OAAO,EAAE,EACR;oBACD,YAAY,EAAE,CAAC,wBAAwB,EAAE,wBAAwB,CAAC;oBAClE,OAAO,EAAE,CAAC,wBAAwB,EAAE,wBAAwB,CAAC;iBAC9D;;gCATD;;;;;;;;;;;;;;;"}
